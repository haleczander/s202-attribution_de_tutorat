alors comment on fait : 
- formule du poids d'un tuteur : 1/annee + 1/note
- formule du poids d'un tutoré : note/20
- si y'a le même nombre on fait juste une affectation normale entre les étudiants
- on passe sur la liste des tuteurs et s'ils peuvent en prendre plusieurs (avec un attribue genre nombreDeTutoré) on multiplie l'étudiant
  en divisant son "poids" pour éviter de lui foutre des gens de ouf!
- s'il y a encore trop d'étudiants, on trie la liste et les derniers étudiants sont virés (liste d'attente pour moins de violence)
  dernier étudiants = plus fort pour les tutorés, plus faible pour les tuteurs (ofc)
- voilà.

AU SECOURS BORDEL.

à faire au jeudi 28/04 11h :)
pas envie de le faire mtn je le fais chez moi avec mon clavier hihihihihihihiihhi (osef)

ajouter dans affectation : paramètre doublon vrai ou faux
-> si vrai alors des tuteurs seront split si nécessaire
-> si faux, dans tous les cas les tuteurs ne seront pas split et il y aura une liste d'attente si déséquilibre

mieux de tout mettre dans la classe affectation
-> on passe en paramètre 2 listes et puis ça processe tout seul
-> faire en sorte que l'affectation soit faite directement avec des étudiants plutôt que leur nom
-> rajouter une couche d'abstraction quoi

modification de étudiants et classes dérivées
-> ajouter une simpleToString pour avoir une représentation d'un étudiant mais juste un nom genre
-> commenter tout en mieux
-> autre chose que j'ai oublié ofc

ajouter une classe utilitaire pour la gestion de listes d'étudiants
-> méthode statiques pour refactor
-> ne plus l"utiliser dans les classes de cas directement mais dans la classe affectation
-> quelques méthodes pour les cas genre transformer un tableau à double entrée en liste d'étudiants

pour affecter deux étudiants ensemble (2 propositions à tester les deux)
-> forcer le poids de l'arête entre deux étudiants à 0 puis retirer 1 à chaque nouvelle affectation
-> sinon construire manuellement la liste d'étudiants à affecter, les retirer de la liste et append la liste d'affectation résultante
-> lequel est le plus propre/opti, jsp :) peut être demander à Boneva jsp